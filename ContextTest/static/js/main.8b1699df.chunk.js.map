{"version":3,"sources":["TelemetryService.js","telemetry-provider.jsx","AdalConfig.js","App.js","index.js"],"names":["reactPlugin","appInsights","ai","initialize","instrumentationKey","browserHistory","Error","ReactPlugin","ApplicationInsights","config","maxBatchInterval","disableFetchTracking","extensions","extensionConfig","identifier","history","loadAppInsights","TelemetryProvider","state","initialized","this","props","AppInsightsInstrumentationKey","Boolean","setState","after","children","Component","withRouter","withAITracking","adalConfig","clientId","tenant","endpoints","graphApiUri","IDRApiUri","WebApiUri","TeamsApiUri","DevOpsAPIUri","postLogoutRedirectUri","window","location","origin","cacheLocation","authContext","AuthenticationContext","WebAPIHelper","cache","getCachedUser","undefined","profile","name","App","withAdalLogin","console","log","qs","a","b","i","length","p","split","decodeURIComponent","replace","search","substr","url","userName","GetAdalUserName","trackEvent","properties","URL","setTimeout","style","display","position","top","left","className","padding","paddingLeft","fontSize","fontFamily","React","runWithAdal","ReactDOM","render","document","getElementById"],"mappings":"+PAGIA,EAAc,KACdC,EAAc,KA4CLC,EAHF,CAACF,cAAaC,cAAaE,WA3Bf,SAACC,EAAoBC,GACpC,IAAKA,EACD,MAAM,IAAIC,MAAM,0CAEpB,IAAKF,EACD,MAAM,IAAIE,MAAM,oEAGpBN,EAAc,IAAIO,KAElBN,EAAc,IAAIO,IAAoB,CAClCC,OAAQ,CACJL,mBAAoBA,EACpBM,iBAAkB,EAClBC,sBAAsB,EACtBC,WAAY,CAACZ,GACba,gBAAgB,eACXb,EAAYc,WAAa,CACtBC,QAASV,QAMbW,oB,gBChCdC,E,2MACFC,MAAQ,CACJC,aAAa,G,mFAGI,IACVJ,EAAWK,KAAKC,MAAhBN,QACAI,EAAeC,KAAKF,MAApBC,YACDG,EAAgCF,KAAKC,MAAMjB,oBAC5CmB,QAAQJ,IAAgBI,QAAQD,IAAkCC,QAAQR,KAC3Eb,EAAGC,WAAWmB,EAA+BP,GAC7CK,KAAKI,SAAS,CAACL,aAAa,KAGhCC,KAAKC,MAAMI,U,+BAGL,IACCC,EAAYN,KAAKC,MAAjBK,SACP,OACI,kBAAC,WAAD,KACKA,O,GArBeC,aA2BjBC,cAAWC,YAAe3B,EAAGF,YAAaiB,I,QCjC5Ca,EAAa,CACtBC,SAAU,uCACVC,OAAQ,4BACRC,UAAW,CACPC,YAAa,8BACbC,UAAW,2CACXC,UAAW,yCACXC,YAAa,2CACbC,aAAc,wCAElBC,sBAAuBC,OAAOC,SAASC,OACvCC,cAAe,gBAINC,EAAc,IAAIC,wBAAsBf,GAGhCgB,E,WACjB,aAAe,oB,8DAKX,IAAIC,EAAQH,EAAYI,gBACxB,OAAc,OAAVD,QAA4BE,IAAVF,EACXH,EAAYI,gBAAgBE,QAAQC,KAEpC,gB,KC4DJC,GDlDiBC,wBAAcT,EAAad,EAAWG,UAAUG,W,YC9B5E,WAAYf,GAAQ,IAAD,6BACfiC,QAAQC,IAAI,oBACZ,4CAAMlC,KAMVmC,GAAM,SAAUC,GACZ,GAAS,IAALA,EAAS,MAAO,GAEpB,IADA,IAAIC,EAAI,GACCC,EAAI,EAAGA,EAAIF,EAAEG,SAAUD,EAAG,CAC/B,IAAIE,EAAIJ,EAAEE,GAAGG,MAAM,IAAK,GACR,GAAZD,EAAED,OACFF,EAAEG,EAAE,IAAM,GAEVH,EAAEG,EAAE,IAAME,mBAAmBF,EAAE,GAAGG,QAAQ,MAAO,MAEzD,OAAON,EAVL,CAWHlB,OAAOC,SAASwB,OAAOC,OAAO,GAAGJ,MAAM,MAhBtC,EAAK5C,MAAQ,CACTjB,YAAc,MAJH,E,iFAuBjBqD,QAAQC,IAAI,aAKN,IAAIY,EAAM/C,KAAKoC,GAAL,IACV,GAAIW,EACJ,CACI,IACIC,GADe,IAAItB,GACMuB,kBAC7Bf,QAAQC,IAAI,eAAea,GAQ5BhD,KAAKF,MAAMjB,YAAYqE,WAAW,CAAEnB,KAAM,cAAcoB,WAAY,CAAEC,IAAKL,EAAKC,SAAWA,KAE3FK,YAAW,WAAKjC,OAAOC,SAASuB,QAAQG,KAAO,Q,qJAmBhD,IAAD,OAEL,OADAb,QAAQC,IAAI,cAER,oCACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAmBnD,mBAAmB,uCAAuCqB,MAAO,WAAQ,EAAKP,MAAMjB,YH9BvFA,IGgCZ,yBAAKyE,MAAO,CAAEC,QAAS,OAAQC,SAAU,WAAYC,IAAK,MAAOC,KAAM,QACnE,yBAAKC,UAAU,WACf,yBAAKL,MAAO,CAAEM,QAAS,MAAOC,YAAa,MAAOC,SAAU,OAAQC,WAAY,UAAhF,sB,GA1EVC,IAAMzD,YCGxB0D,sBAAYzC,GAAa,WAErB0C,IAASC,OAAO,kBAAC,EAAD,MACZC,SAASC,eAAe,YAJX,K","file":"static/js/main.8b1699df.chunk.js","sourcesContent":["import {ApplicationInsights} from '@microsoft/applicationinsights-web';\r\nimport {ReactPlugin} from '@microsoft/applicationinsights-react-js';\r\n\r\nlet reactPlugin = null;\r\nlet appInsights = null;\r\n\r\n/**\r\n * Create the App Insights Telemetry Service\r\n * @return {{reactPlugin: ReactPlugin, appInsights: Object, initialize: Function}} - Object\r\n */\r\nconst createTelemetryService = () => {\r\n\r\n    /**\r\n     * Initialize the Application Insights class\r\n     * @param {string} instrumentationKey - Application Insights Instrumentation Key\r\n     * @param {Object} browserHistory - client's browser history, supplied by the withRouter HOC\r\n     * @return {void}\r\n     */\r\n    const initialize = (instrumentationKey, browserHistory) => {\r\n        if (!browserHistory) {\r\n            throw new Error('Could not initialize Telemetry Service');\r\n        }\r\n        if (!instrumentationKey) {\r\n            throw new Error('Instrumentation key not provided in ./src/telemetry-provider.jsx')\r\n        }\r\n\r\n        reactPlugin = new ReactPlugin();\r\n\r\n        appInsights = new ApplicationInsights({\r\n            config: {\r\n                instrumentationKey: instrumentationKey,\r\n                maxBatchInterval: 0,\r\n                disableFetchTracking: false,\r\n                extensions: [reactPlugin],\r\n                extensionConfig: {\r\n                    [reactPlugin.identifier]: {\r\n                        history: browserHistory\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        appInsights.loadAppInsights();\r\n    };\r\n\r\n    return {reactPlugin, appInsights, initialize};\r\n};\r\n\r\nexport const ai = createTelemetryService();\r\nexport const getAppInsights = () => appInsights;\r\n","import React, {Component, Fragment} from 'react';\r\nimport {withAITracking} from '@microsoft/applicationinsights-react-js';\r\nimport {ai} from './TelemetryService';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\n/**\r\n * This Component provides telemetry with Azure App Insights\r\n *\r\n * NOTE: the package '@microsoft/applicationinsights-react-js' has a HOC withAITracking that requires this to be a Class Component rather than a Functional Component\r\n */\r\nclass TelemetryProvider extends Component {\r\n    state = {\r\n        initialized: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {history} = this.props;\r\n        const {initialized} = this.state;\r\n        const AppInsightsInstrumentationKey = this.props.instrumentationKey; // PUT YOUR KEY HERE\r\n        if (!Boolean(initialized) && Boolean(AppInsightsInstrumentationKey) && Boolean(history)) {\r\n            ai.initialize(AppInsightsInstrumentationKey, history);\r\n            this.setState({initialized: true});\r\n        }\r\n\r\n        this.props.after();\r\n    }\r\n\r\n    render() {\r\n        const {children} = this.props;\r\n        return (\r\n            <Fragment>\r\n                {children}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(withAITracking(ai.reactPlugin, TelemetryProvider));\r\n","import { AuthenticationContext, adalFetch, withAdalLogin } from 'react-adal';\r\n\r\n\r\n\r\nexport const adalConfig = {\r\n    clientId: \"e0f60ff0-327b-43e2-9055-54782bbed141\",\r\n    tenant: \"microsoft.onmicrosoft.com\",\r\n    endpoints: {\r\n        graphApiUri: \"https://graph.microsoft.com\",\r\n        IDRApiUri: \"https://idrservice-stg.azurewebsites.net\",\r\n        WebApiUri: \"https://campuswebapi.azurewebsites.net\",\r\n        TeamsApiUri: \"https://teamsforcampus.azurewebsites.net\",\r\n        DevOpsAPIUri: \"499b84ac-1321-427f-aa17-267ca6975798\"\r\n    },\r\n    postLogoutRedirectUri: window.location.origin,\r\n    cacheLocation: 'localStorage'\r\n};\r\n\r\n\r\nexport const authContext = new AuthenticationContext(adalConfig);\r\n\r\n\r\nexport default class WebAPIHelper {\r\n    constructor() {\r\n\r\n    }\r\n    \r\n    GetAdalUserName(){\r\n        var cache = authContext.getCachedUser();\r\n        if (cache !== null || cache !== undefined)\r\n            return authContext.getCachedUser().profile.name;\r\n        else\r\n            return 'Not found';\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const adalApiFetch = (url, options) => {\r\n    return adalFetch(authContext, adalConfig.endpoints.WebApiUri, fetch, url, options);\r\n}\r\n\r\nexport const withAdalLoginApi = withAdalLogin(authContext, adalConfig.endpoints.WebApiUri);\r\n\r\nexport const adalUserName = () => {\r\n    var cache = authContext.getCachedUser();\r\n    if (cache !== null || cache !== undefined)\r\n        return authContext.getCachedUser().profile.name;\r\n    else\r\n        return '';\r\n}\r\n\r\nexport const adalUserAlias = () => {\r\n    var cache = authContext.getCachedUser();\r\n    if (cache !== null || cache !== undefined)\r\n        return authContext.getCachedUser().userName.split('@')[0];\r\n    else\r\n        return '';\r\n}\r\n\r\nexport const adalUserEmail = () => {\r\n    var cache = authContext.getCachedUser();\r\n    if (cache !== null || cache !== undefined)\r\n        return authContext.getCachedUser().userName;\r\n    else\r\n        return '';\r\n}","import React from 'react';\r\nimport { BrowserRouter, Link, Route } from 'react-router-dom';\r\nimport { getAppInsights } from './TelemetryService';\r\nimport TelemetryProvider from './telemetry-provider';\r\n//import * as microsoftTeams from '@microsoft/teams-js';\r\nimport WebAPIHelper from './AdalConfig.js';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    \r\n    \r\n    constructor(props) {\r\n        console.log('app constructor');\r\n        super(props);\r\n        this.state = {\r\n            appInsights : null\r\n        }\r\n    }\r\n\r\n    qs = (function (a) {\r\n        if (a == \"\") return {};\r\n        var b = {};\r\n        for (var i = 0; i < a.length; ++i) {\r\n            var p = a[i].split('=', 2);\r\n            if (p.length == 1)\r\n                b[p[0]] = \"\";\r\n            else\r\n                b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\r\n        }\r\n        return b;\r\n    })(window.location.search.substr(1).split('&'));\r\n\r\n\r\n    componentDidMount() {\r\n      console.log('app mount');\r\n        // if (false && window.performance && window.performance.navigation.type == window.performance.navigation.TYPE_BACK_FORWARD) {\r\n        //     window.history.back();\r\n        // }\r\n        // else {\r\n            let url = this.qs[\"url\"];\r\n            if (url)\r\n            {\r\n                let webAPIHelper = new WebAPIHelper();\r\n                let userName =  webAPIHelper.GetAdalUserName();\r\n                console.log('User Name : ',userName);\r\n                \r\n                //console.log(' Test  123',microsoftTeams);\r\n\r\n                //microsoftTeams.authentication.authenticate();\r\n               //microsoftTeams.initialize();\r\n               // console.log('initialize');\r\n                //microsoftTeams.getContext((context)=>{alert(context);console.log('Context : ',context)})\r\n               this.state.appInsights.trackEvent({ name: 'Website Hit',properties: { URL: url ,userName : userName}});\r\n               \r\n               setTimeout(()=>{window.location.replace(url);},3000)\r\n\r\n            }\r\n        //}\r\n    }\r\n\r\n    trackException() {\r\n        //appInsights.trackException({ error: new Error('some error'), severityLevel: SeverityLevel.Error });\r\n    }\r\n\r\n    trackTrace() {\r\n       // appInsights.trackTrace({ message: 'some trace', severityLevel: SeverityLevel.Information });\r\n    }\r\n\r\n    trackEvent() {\r\n        //appInsights.trackEvent({ name: 'some test event' });\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log('app render');\r\n        return (\r\n            <>\r\n                <BrowserRouter>\r\n                    <TelemetryProvider instrumentationKey=\"8d188f25-4d90-421a-ab66-217f77e754ce\" after={() => { this.state.appInsights = getAppInsights() }}>\r\n\r\n                        <div style={{ display: \"flex\", position: \"absolute\", top: \"45%\", left: \"45%\" }}>\r\n                            <div className=\"loader\"></div>\r\n                            <div style={{ padding: \"3px\", paddingLeft: \"5px\", fontSize: \"20px\", fontFamily: \"arial\" }}>Loading...</div>\r\n                        </div>\r\n                    </TelemetryProvider>\r\n                </BrowserRouter>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { render } from 'react-dom';\r\nimport App from './App.js'\r\nimport { runWithAdal } from 'react-adal';\r\nimport { authContext, adalUserAlias } from './AdalConfig.js';\r\n\r\n// render(\r\n// <App/>,\r\n//   document.getElementById('container')\r\n// )\r\nconst DO_NOT_LOGIN = false;\r\nrunWithAdal(authContext, () => {\r\n    \r\n    ReactDOM.render(<App/>,   \r\n        document.getElementById('root')\r\n    );\r\n}, DO_NOT_LOGIN);\r\n\r\n"],"sourceRoot":""}